xterm.js bug fixes.
===================================================================
diff --git  a/xterm.js b/xterm.js
--- xterm.js
+++ xterm.js
@@ -10,10 +10,10 @@
  * @license MIT
  */

-import { CompositionHelper } from './CompositionHelper.js';
-import { EventEmitter } from './EventEmitter.js';
-import { Viewport } from './Viewport.js';
-import { rightClickHandler, pasteHandler, copyHandler } from './handlers/Clipboard.js';
+import { CompositionHelper } from './CompositionHelper';
+import { EventEmitter } from './EventEmitter';
+import { Viewport } from './Viewport';
+import { rightClickHandler, pasteHandler, copyHandler } from './handlers/Clipboard';
 import * as Browser from './utils/Browser';
 import * as Keyboard from './utils/Keyboard';

@@ -110,6 +110,7 @@
   this.cols = options.cols || options.geometry[0];
   this.rows = options.rows || options.geometry[1];
   this.geometry = [this.cols, this.rows];
+  this.focusOnOpen = options.focusOnOpen;

   if (options.handler) {
     this.on('data', options.handler);
@@ -187,6 +188,8 @@
   this.refreshEnd;
   this.savedX;
   this.savedY;
+  this.normalSavedX;
+  this.normalSavedY;
   this.savedCols;

   // stream
@@ -325,7 +328,8 @@
   scrollback: 1000,
   screenKeys: false,
   debug: false,
-  cancelEvents: false
+  cancelEvents: false,
+  focusOnOpen: true
   // programFeatures: false,
   // focusKeys: false,
 };
@@ -592,7 +596,9 @@
   this.initGlobal();

   // Ensure there is a Terminal.focus.
-  this.focus();
+  if (this.focusOnOpen) {
+    this.focus();
+  }

   on(this.element, 'click', function() {
     var selection = document.getSelection(),
@@ -2844,6 +2850,10 @@
  * @param {number} y The number of rows to resize to.
  */
 Terminal.prototype.resize = function(x, y) {
+  if (isNaN(y) || isNaN(x)) {
+    return;
+  }
+
   var line
   , el
   , i
@@ -4306,8 +4316,13 @@
           //   this.y = this.savedY;
           // }
           this.refresh(0, this.rows - 1);
-          this.showCursor();
+        } else {
+          // if this.normal = null restore state works incorrect, so we reset state
+          this.savedX = 0;
+          this.savedY = 0;
+          this.reset();
         }
+        this.showCursor();
         break;
     }
   }
@@ -4334,8 +4349,13 @@
  *   Save cursor (ANSI.SYS).
  */
 Terminal.prototype.saveCursor = function(params) {
-  this.savedX = this.x;
-  this.savedY = this.y;
+  if (this.normal) {
+    this.normalSavedX = this.x;
+    this.normalSavedY = this.y;
+  } else {
+    this.savedX = this.x;
+    this.savedY = this.y;
+  }
 };


@@ -4344,8 +4364,13 @@
  *   Restore cursor (ANSI.SYS).
  */
 Terminal.prototype.restoreCursor = function(params) {
-  this.x = this.savedX || 0;
-  this.y = this.savedY || 0;
+  if (this.normal) {
+    this.x = this.normalSavedX || 0;
+    this.y = this.normalSavedY || 0;
+  } else {
+    this.x = this.savedX || 0;
+    this.y = this.savedY || 0;
+  }
 };


@@ -4545,7 +4570,7 @@
   this.cursorHidden = false;
   this.insertMode = false;
   this.originMode = false;
-  this.wraparoundMode = false; // autowrap
+  this.wraparoundMode = true; // autowrap
   this.applicationKeypad = false; // ?
   this.viewport.syncScrollArea();
   this.applicationCursor = false;
